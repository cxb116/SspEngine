package main

import (
	"context"
	"database/sql"
	"fmt"
	_ "github.com/go-sql-driver/mysql"
	"github.com/redis/go-redis/v9"
	"log"
	"sync"
	"time"
)

var db *sql.DB

func initDB() {

	dsn := "root:ddz2008@tcp(127.0.0.1:3306)/basedata?charset=utf8mb4&parseTime=True"

	var err error
	db, err = sql.Open("mysql", dsn)
	if err != nil {
		log.Fatalf("数据库连接失败: %v", err)
	}

	// 优化后的连接池配置
	db.SetMaxOpenConns(100)                // 最大打开连接数
	db.SetMaxIdleConns(30)                 // 最大空闲连接数
	db.SetConnMaxLifetime(2 * time.Hour)   // 连接最大存活时间
	db.SetConnMaxIdleTime(5 * time.Minute) // 空闲连接最大存活时间

	// 验证连接
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := db.PingContext(ctx); err != nil {
		log.Fatalf("数据库连接验证失败: %v", err)
	}

	log.Println("数据库连接池初始化成功")
}

var redisClient *redis.Client

func initCache() {
	redisClient = redis.NewClient(&redis.Options{
		Addr:     "localhost:6379", // Redis 地址
		Password: "",               // 密码
		DB:       0,                // 默认 DB

		// 优化后的连接池配置
		PoolSize:     500, // 更适合本地开发的连接数
		MinIdleConns: 50,  // 最小空闲连接
		MaxRetries:   30,  // 添加重试机制
		DialTimeout:  5 * time.Second,
		PoolTimeout:  30 * time.Second,
		// 修正注释
		ConnMaxLifetime: 30 * time.Minute, // 连接最大存活时间 100 分钟

		// 推荐添加以下配置
		ReadTimeout:  3 * time.Second,
		WriteTimeout: 3 * time.Second,
	})

	// 测试连接（带重试逻辑）
	var err error
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// 添加重试逻辑
	for i := 0; i < 3; i++ {
		_, err = redisClient.Ping(ctx).Result()
		if err == nil {
			break
		}
		time.Sleep(time.Second * time.Duration(i+1))
	}

	if err != nil {
		log.Fatalf("Redis connection failed after retries: %v", err)
	}
	log.Println("Redis connect success")
}

type IosData struct {
	Caid string `json:"caid"`
	Idfa string `json:"idfa"`
}

func main() {
	initDB()
	initCache()
	time.Sleep(3 * time.Second)
	IOSProducerChannel := make(chan *IosData, 255)

	go IOSProducerWorker(IOSProducerChannel)
	IosWorker(IOSProducerChannel)

}

func IosWorker(IOSProducerChannel chan *IosData) {
	var wg sync.WaitGroup
	setKeyidfa := "idfa"
	setKeyCaid := "caid"
	for data := range IOSProducerChannel {
		wg.Add(1)
		go func(iosData *IosData) {
			defer wg.Done()
			ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
			fmt.Println(data.Idfa, "Caid:", data.Caid)
			if _, err := redisClient.SAdd(ctx, setKeyidfa, iosData.Idfa).Result(); err != nil {
				log.Printf("idfa add failed: %v", err)
				cancel()
			}
			if _, err := redisClient.SAdd(ctx, setKeyCaid, iosData.Caid).Result(); err != nil {
				log.Printf("caid add failed: %v", err)
				cancel()
			}
		}(data)

	}
	wg.Wait()
}

func IOSProducerWorker(IOSProducerChannel chan *IosData) {
	count := 0
	index := 0
	for {
		rows, err := db.Query("select caid, idfa from ios_click_data where id > ? limit 100", count)
		if err != nil {
			log.Fatalf("error: %v", err)
			continue
		}

		for rows.Next() {
			index++
			var IosData IosData
			err := rows.Scan(&IosData.Caid, &IosData.Idfa)
			if err != nil {
				log.Fatalf("error: %v", err)
			}
			log.Println(IosData.Caid, IosData.Idfa)
			IOSProducerChannel <- &IosData
		}
		rows.Close()
		count += 100
		if index < count {
			break
		}

	}
	close(IOSProducerChannel)
}
